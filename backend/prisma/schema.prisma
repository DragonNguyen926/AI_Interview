// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Common enums youâ€™ll likely need
enum Role {
  ADMIN
  INTERVIEWER
  CANDIDATE
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String   @unique
  password  String
  role      Role     @default(CANDIDATE)
  firstName String
  lastName  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  interviews InterviewSession[] @relation("UserInterviews")
}

/// One interview session per candidate run
model InterviewSession {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  candidateId String    @db.Uuid
  candidate   User      @relation("UserInterviews", fields: [candidateId], references: [id])
  status      String    @default("CREATED") // CREATED | IN_PROGRESS | COMPLETED | ABORTED
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())

  questions Question[]
  answers   Answer[]
  feedbacks Feedback[]
}

/// Questions asked during a session
model Question {
  id        String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionId String           @db.Uuid
  session   InterviewSession @relation(fields: [sessionId], references: [id])
  ordinal   Int
  text      String
  createdAt DateTime         @default(now())

  answers Answer[]
}

model Answer {
  id         String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionId  String           @db.Uuid
  session    InterviewSession @relation(fields: [sessionId], references: [id])
  questionId String           @db.Uuid
  question   Question         @relation(fields: [questionId], references: [id])
  transcript String
  aiJson     Json?
  createdAt  DateTime         @default(now())
}

model Feedback {
  id        String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionId String           @db.Uuid
  session   InterviewSession @relation(fields: [sessionId], references: [id])
  rubric    Json
  summary   String
  createdAt DateTime         @default(now())
}
